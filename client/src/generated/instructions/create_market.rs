//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct CreateMarket {
    pub token_mill_config: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub token_mint0: solana_program::pubkey::Pubkey,

    pub market_reserve0: solana_program::pubkey::Pubkey,

    pub token0_metadata: solana_program::pubkey::Pubkey,

    pub token_mint1: solana_program::pubkey::Pubkey,

    pub market_reserve1: solana_program::pubkey::Pubkey,

    pub creator: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub token_metadata_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl CreateMarket {
    pub fn instruction(
        &self,
        args: CreateMarketInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateMarketInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mill_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mint0,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_reserve0,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token0_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint1,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_reserve1,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TOKEN_MILL_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateMarketInstructionData {
    discriminator: [u8; 8],
}

impl CreateMarketInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [103, 226, 97, 235, 200, 188, 251, 254],
        }
    }
}

impl Default for CreateMarketInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateMarketInstructionArgs {
    pub name: String,
    pub symbol: String,
    pub uri: String,
    pub swap_authority: Option<Pubkey>,
}

/// Instruction builder for `CreateMarket`.
///
/// ### Accounts:
///
///   0. `[]` token_mill_config
///   1. `[writable]` market
///   2. `[writable, signer]` token_mint0
///   3. `[writable]` market_reserve0
///   4. `[writable]` token0_metadata
///   5. `[]` token_mint1
///   6. `[writable]` market_reserve1
///   7. `[writable, signer]` creator
///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   10. `[optional]` token_metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   11. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   12. `[optional]` event_authority (default to `2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5`)
///   13. `[optional]` program (default to `JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2`)
#[derive(Clone, Debug, Default)]
pub struct CreateMarketBuilder {
    token_mill_config: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    token_mint0: Option<solana_program::pubkey::Pubkey>,
    market_reserve0: Option<solana_program::pubkey::Pubkey>,
    token0_metadata: Option<solana_program::pubkey::Pubkey>,
    token_mint1: Option<solana_program::pubkey::Pubkey>,
    market_reserve1: Option<solana_program::pubkey::Pubkey>,
    creator: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_metadata_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    swap_authority: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateMarketBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn token_mill_config(
        &mut self,
        token_mill_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_mill_config = Some(token_mill_config);
        self
    }
    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    #[inline(always)]
    pub fn token_mint0(&mut self, token_mint0: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint0 = Some(token_mint0);
        self
    }
    #[inline(always)]
    pub fn market_reserve0(
        &mut self,
        market_reserve0: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_reserve0 = Some(market_reserve0);
        self
    }
    #[inline(always)]
    pub fn token0_metadata(
        &mut self,
        token0_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token0_metadata = Some(token0_metadata);
        self
    }
    #[inline(always)]
    pub fn token_mint1(&mut self, token_mint1: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint1 = Some(token_mint1);
        self
    }
    #[inline(always)]
    pub fn market_reserve1(
        &mut self,
        market_reserve1: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_reserve1 = Some(market_reserve1);
        self
    }
    #[inline(always)]
    pub fn creator(&mut self, creator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_metadata_program = Some(token_metadata_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to '2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5']`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    /// `[optional account, default to 'JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2']`
    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn swap_authority(&mut self, swap_authority: Pubkey) -> &mut Self {
        self.swap_authority = Some(swap_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts =
            CreateMarket {
                token_mill_config: self
                    .token_mill_config
                    .expect("token_mill_config is not set"),
                market: self.market.expect("market is not set"),
                token_mint0: self.token_mint0.expect("token_mint0 is not set"),
                market_reserve0: self.market_reserve0.expect("market_reserve0 is not set"),
                token0_metadata: self.token0_metadata.expect("token0_metadata is not set"),
                token_mint1: self.token_mint1.expect("token_mint1 is not set"),
                market_reserve1: self.market_reserve1.expect("market_reserve1 is not set"),
                creator: self.creator.expect("creator is not set"),
                system_program: self
                    .system_program
                    .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                    "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                )),
                token_metadata_program: self.token_metadata_program.unwrap_or(
                    solana_program::pubkey!("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"),
                ),
                associated_token_program: self.associated_token_program.unwrap_or(
                    solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
                ),
                event_authority: self.event_authority.unwrap_or(solana_program::pubkey!(
                    "2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5"
                )),
                program: self.program.unwrap_or(solana_program::pubkey!(
                    "JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2"
                )),
            };
        let args = CreateMarketInstructionArgs {
            name: self.name.clone().expect("name is not set"),
            symbol: self.symbol.clone().expect("symbol is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            swap_authority: self.swap_authority.clone(),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_market` CPI accounts.
pub struct CreateMarketCpiAccounts<'a, 'b> {
    pub token_mill_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint0: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve0: &'b solana_program::account_info::AccountInfo<'a>,

    pub token0_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint1: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve1: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_market` CPI instruction.
pub struct CreateMarketCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mill_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint0: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve0: &'b solana_program::account_info::AccountInfo<'a>,

    pub token0_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint1: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve1: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateMarketInstructionArgs,
}

impl<'a, 'b> CreateMarketCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateMarketCpiAccounts<'a, 'b>,
        args: CreateMarketInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            token_mill_config: accounts.token_mill_config,
            market: accounts.market,
            token_mint0: accounts.token_mint0,
            market_reserve0: accounts.market_reserve0,
            token0_metadata: accounts.token0_metadata,
            token_mint1: accounts.token_mint1,
            market_reserve1: accounts.market_reserve1,
            creator: accounts.creator,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            token_metadata_program: accounts.token_metadata_program,
            associated_token_program: accounts.associated_token_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mill_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mint0.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_reserve0.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token0_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint1.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_reserve1.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateMarketInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TOKEN_MILL_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.token_mill_config.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.token_mint0.clone());
        account_infos.push(self.market_reserve0.clone());
        account_infos.push(self.token0_metadata.clone());
        account_infos.push(self.token_mint1.clone());
        account_infos.push(self.market_reserve1.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_metadata_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateMarket` via CPI.
///
/// ### Accounts:
///
///   0. `[]` token_mill_config
///   1. `[writable]` market
///   2. `[writable, signer]` token_mint0
///   3. `[writable]` market_reserve0
///   4. `[writable]` token0_metadata
///   5. `[]` token_mint1
///   6. `[writable]` market_reserve1
///   7. `[writable, signer]` creator
///   8. `[]` system_program
///   9. `[]` token_program
///   10. `[]` token_metadata_program
///   11. `[]` associated_token_program
///   12. `[]` event_authority
///   13. `[]` program
#[derive(Clone, Debug)]
pub struct CreateMarketCpiBuilder<'a, 'b> {
    instruction: Box<CreateMarketCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateMarketCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateMarketCpiBuilderInstruction {
            __program: program,
            token_mill_config: None,
            market: None,
            token_mint0: None,
            market_reserve0: None,
            token0_metadata: None,
            token_mint1: None,
            market_reserve1: None,
            creator: None,
            system_program: None,
            token_program: None,
            token_metadata_program: None,
            associated_token_program: None,
            event_authority: None,
            program: None,
            name: None,
            symbol: None,
            uri: None,
            swap_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn token_mill_config(
        &mut self,
        token_mill_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mill_config = Some(token_mill_config);
        self
    }
    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    #[inline(always)]
    pub fn token_mint0(
        &mut self,
        token_mint0: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint0 = Some(token_mint0);
        self
    }
    #[inline(always)]
    pub fn market_reserve0(
        &mut self,
        market_reserve0: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_reserve0 = Some(market_reserve0);
        self
    }
    #[inline(always)]
    pub fn token0_metadata(
        &mut self,
        token0_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_metadata = Some(token0_metadata);
        self
    }
    #[inline(always)]
    pub fn token_mint1(
        &mut self,
        token_mint1: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint1 = Some(token_mint1);
        self
    }
    #[inline(always)]
    pub fn market_reserve1(
        &mut self,
        market_reserve1: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_reserve1 = Some(market_reserve1);
        self
    }
    #[inline(always)]
    pub fn creator(
        &mut self,
        creator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_metadata_program(
        &mut self,
        token_metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_metadata_program = Some(token_metadata_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }
    /// `[optional argument]`
    #[inline(always)]
    pub fn swap_authority(&mut self, swap_authority: Pubkey) -> &mut Self {
        self.instruction.swap_authority = Some(swap_authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateMarketInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            symbol: self.instruction.symbol.clone().expect("symbol is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            swap_authority: self.instruction.swap_authority.clone(),
        };
        let instruction = CreateMarketCpi {
            __program: self.instruction.__program,

            token_mill_config: self
                .instruction
                .token_mill_config
                .expect("token_mill_config is not set"),

            market: self.instruction.market.expect("market is not set"),

            token_mint0: self
                .instruction
                .token_mint0
                .expect("token_mint0 is not set"),

            market_reserve0: self
                .instruction
                .market_reserve0
                .expect("market_reserve0 is not set"),

            token0_metadata: self
                .instruction
                .token0_metadata
                .expect("token0_metadata is not set"),

            token_mint1: self
                .instruction
                .token_mint1
                .expect("token_mint1 is not set"),

            market_reserve1: self
                .instruction
                .market_reserve1
                .expect("market_reserve1 is not set"),

            creator: self.instruction.creator.expect("creator is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_metadata_program: self
                .instruction
                .token_metadata_program
                .expect("token_metadata_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateMarketCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    token_mill_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint0: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_reserve0: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token0_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint1: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_reserve1: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    creator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    swap_authority: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
