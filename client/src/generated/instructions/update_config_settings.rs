//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct UpdateConfigSettings {
    pub token_mill_config: solana_program::pubkey::Pubkey,

    pub new_protocol_fee_reserve: solana_program::pubkey::Pubkey,

    pub new_creator_fee_pool: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl UpdateConfigSettings {
    pub fn instruction(
        &self,
        args: UpdateConfigSettingsInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateConfigSettingsInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_mill_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.new_protocol_fee_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.new_creator_fee_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateConfigSettingsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TOKEN_MILL_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigSettingsInstructionData {
    discriminator: [u8; 8],
}

impl UpdateConfigSettingsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [222, 242, 103, 173, 124, 98, 180, 244],
        }
    }
}

impl Default for UpdateConfigSettingsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigSettingsInstructionArgs {
    pub new_protocol_fee_share: u32,
    pub new_fee_recipient_change_cooldown: u32,
}

/// Instruction builder for `UpdateConfigSettings`.
///
/// ### Accounts:
///
///   0. `[writable]` token_mill_config
///   1. `[]` new_protocol_fee_reserve
///   2. `[]` new_creator_fee_pool
///   3. `[signer]` admin
///   4. `[optional]` event_authority (default to `2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5`)
///   5. `[optional]` program (default to `JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2`)
#[derive(Clone, Debug, Default)]
pub struct UpdateConfigSettingsBuilder {
    token_mill_config: Option<solana_program::pubkey::Pubkey>,
    new_protocol_fee_reserve: Option<solana_program::pubkey::Pubkey>,
    new_creator_fee_pool: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    new_protocol_fee_share: Option<u32>,
    new_fee_recipient_change_cooldown: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateConfigSettingsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn token_mill_config(
        &mut self,
        token_mill_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_mill_config = Some(token_mill_config);
        self
    }
    #[inline(always)]
    pub fn new_protocol_fee_reserve(
        &mut self,
        new_protocol_fee_reserve: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.new_protocol_fee_reserve = Some(new_protocol_fee_reserve);
        self
    }
    #[inline(always)]
    pub fn new_creator_fee_pool(
        &mut self,
        new_creator_fee_pool: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.new_creator_fee_pool = Some(new_creator_fee_pool);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }
    /// `[optional account, default to '2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5']`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    /// `[optional account, default to 'JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2']`
    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn new_protocol_fee_share(&mut self, new_protocol_fee_share: u32) -> &mut Self {
        self.new_protocol_fee_share = Some(new_protocol_fee_share);
        self
    }
    #[inline(always)]
    pub fn new_fee_recipient_change_cooldown(
        &mut self,
        new_fee_recipient_change_cooldown: u32,
    ) -> &mut Self {
        self.new_fee_recipient_change_cooldown = Some(new_fee_recipient_change_cooldown);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateConfigSettings {
            token_mill_config: self
                .token_mill_config
                .expect("token_mill_config is not set"),
            new_protocol_fee_reserve: self
                .new_protocol_fee_reserve
                .expect("new_protocol_fee_reserve is not set"),
            new_creator_fee_pool: self
                .new_creator_fee_pool
                .expect("new_creator_fee_pool is not set"),
            admin: self.admin.expect("admin is not set"),
            event_authority: self.event_authority.unwrap_or(solana_program::pubkey!(
                "2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5"
            )),
            program: self.program.unwrap_or(solana_program::pubkey!(
                "JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2"
            )),
        };
        let args = UpdateConfigSettingsInstructionArgs {
            new_protocol_fee_share: self
                .new_protocol_fee_share
                .clone()
                .expect("new_protocol_fee_share is not set"),
            new_fee_recipient_change_cooldown: self
                .new_fee_recipient_change_cooldown
                .clone()
                .expect("new_fee_recipient_change_cooldown is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_config_settings` CPI accounts.
pub struct UpdateConfigSettingsCpiAccounts<'a, 'b> {
    pub token_mill_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_protocol_fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator_fee_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_config_settings` CPI instruction.
pub struct UpdateConfigSettingsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mill_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_protocol_fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator_fee_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateConfigSettingsInstructionArgs,
}

impl<'a, 'b> UpdateConfigSettingsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateConfigSettingsCpiAccounts<'a, 'b>,
        args: UpdateConfigSettingsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            token_mill_config: accounts.token_mill_config,
            new_protocol_fee_reserve: accounts.new_protocol_fee_reserve,
            new_creator_fee_pool: accounts.new_creator_fee_pool,
            admin: accounts.admin,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_mill_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.new_protocol_fee_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.new_creator_fee_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateConfigSettingsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TOKEN_MILL_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.token_mill_config.clone());
        account_infos.push(self.new_protocol_fee_reserve.clone());
        account_infos.push(self.new_creator_fee_pool.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateConfigSettings` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` token_mill_config
///   1. `[]` new_protocol_fee_reserve
///   2. `[]` new_creator_fee_pool
///   3. `[signer]` admin
///   4. `[]` event_authority
///   5. `[]` program
#[derive(Clone, Debug)]
pub struct UpdateConfigSettingsCpiBuilder<'a, 'b> {
    instruction: Box<UpdateConfigSettingsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateConfigSettingsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateConfigSettingsCpiBuilderInstruction {
            __program: program,
            token_mill_config: None,
            new_protocol_fee_reserve: None,
            new_creator_fee_pool: None,
            admin: None,
            event_authority: None,
            program: None,
            new_protocol_fee_share: None,
            new_fee_recipient_change_cooldown: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn token_mill_config(
        &mut self,
        token_mill_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mill_config = Some(token_mill_config);
        self
    }
    #[inline(always)]
    pub fn new_protocol_fee_reserve(
        &mut self,
        new_protocol_fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_protocol_fee_reserve = Some(new_protocol_fee_reserve);
        self
    }
    #[inline(always)]
    pub fn new_creator_fee_pool(
        &mut self,
        new_creator_fee_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_creator_fee_pool = Some(new_creator_fee_pool);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn new_protocol_fee_share(&mut self, new_protocol_fee_share: u32) -> &mut Self {
        self.instruction.new_protocol_fee_share = Some(new_protocol_fee_share);
        self
    }
    #[inline(always)]
    pub fn new_fee_recipient_change_cooldown(
        &mut self,
        new_fee_recipient_change_cooldown: u32,
    ) -> &mut Self {
        self.instruction.new_fee_recipient_change_cooldown =
            Some(new_fee_recipient_change_cooldown);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateConfigSettingsInstructionArgs {
            new_protocol_fee_share: self
                .instruction
                .new_protocol_fee_share
                .clone()
                .expect("new_protocol_fee_share is not set"),
            new_fee_recipient_change_cooldown: self
                .instruction
                .new_fee_recipient_change_cooldown
                .clone()
                .expect("new_fee_recipient_change_cooldown is not set"),
        };
        let instruction = UpdateConfigSettingsCpi {
            __program: self.instruction.__program,

            token_mill_config: self
                .instruction
                .token_mill_config
                .expect("token_mill_config is not set"),

            new_protocol_fee_reserve: self
                .instruction
                .new_protocol_fee_reserve
                .expect("new_protocol_fee_reserve is not set"),

            new_creator_fee_pool: self
                .instruction
                .new_creator_fee_pool
                .expect("new_creator_fee_pool is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateConfigSettingsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    token_mill_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_protocol_fee_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_creator_fee_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_protocol_fee_share: Option<u32>,
    new_fee_recipient_change_cooldown: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
