//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct SwapWithPriceLimit {
    pub config: solana_program::pubkey::Pubkey,

    pub market: solana_program::pubkey::Pubkey,

    pub market_reserve0: solana_program::pubkey::Pubkey,

    pub user_token_account0: solana_program::pubkey::Pubkey,

    pub market_reserve1: solana_program::pubkey::Pubkey,

    pub user_token_account1: solana_program::pubkey::Pubkey,

    pub fee_reserve: solana_program::pubkey::Pubkey,

    pub protocol_fee_reserve: solana_program::pubkey::Pubkey,

    pub creator_fee_pool: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub swap_authority: Option<solana_program::pubkey::Pubkey>,

    pub token_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl SwapWithPriceLimit {
    pub fn instruction(
        &self,
        args: SwapWithPriceLimitInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SwapWithPriceLimitInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_reserve0,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_account0,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_reserve1,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_account1,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_fee_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator_fee_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user, true,
        ));
        if let Some(swap_authority) = self.swap_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                swap_authority,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TOKEN_MILL_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SwapWithPriceLimitInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::TOKEN_MILL_V2_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapWithPriceLimitInstructionData {
    discriminator: [u8; 8],
}

impl SwapWithPriceLimitInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [54, 23, 76, 40, 64, 202, 5, 69],
        }
    }
}

impl Default for SwapWithPriceLimitInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapWithPriceLimitInstructionArgs {
    pub zero_for_one: bool,
    pub delta_amount: i64,
    pub sqrt_price_limit_x96: u128,
}

/// Instruction builder for `SwapWithPriceLimit`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` market
///   2. `[writable]` market_reserve0
///   3. `[writable]` user_token_account0
///   4. `[writable]` market_reserve1
///   5. `[writable]` user_token_account1
///   6. `[writable]` fee_reserve
///   7. `[writable]` protocol_fee_reserve
///   8. `[writable]` creator_fee_pool
///   9. `[signer]` user
///   10. `[signer, optional]` swap_authority
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[optional]` event_authority (default to `2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5`)
///   13. `[optional]` program (default to `JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2`)
#[derive(Clone, Debug, Default)]
pub struct SwapWithPriceLimitBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    market_reserve0: Option<solana_program::pubkey::Pubkey>,
    user_token_account0: Option<solana_program::pubkey::Pubkey>,
    market_reserve1: Option<solana_program::pubkey::Pubkey>,
    user_token_account1: Option<solana_program::pubkey::Pubkey>,
    fee_reserve: Option<solana_program::pubkey::Pubkey>,
    protocol_fee_reserve: Option<solana_program::pubkey::Pubkey>,
    creator_fee_pool: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    swap_authority: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    zero_for_one: Option<bool>,
    delta_amount: Option<i64>,
    sqrt_price_limit_x96: Option<u128>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SwapWithPriceLimitBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    #[inline(always)]
    pub fn market_reserve0(
        &mut self,
        market_reserve0: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_reserve0 = Some(market_reserve0);
        self
    }
    #[inline(always)]
    pub fn user_token_account0(
        &mut self,
        user_token_account0: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_token_account0 = Some(user_token_account0);
        self
    }
    #[inline(always)]
    pub fn market_reserve1(
        &mut self,
        market_reserve1: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_reserve1 = Some(market_reserve1);
        self
    }
    #[inline(always)]
    pub fn user_token_account1(
        &mut self,
        user_token_account1: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_token_account1 = Some(user_token_account1);
        self
    }
    #[inline(always)]
    pub fn fee_reserve(&mut self, fee_reserve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_reserve = Some(fee_reserve);
        self
    }
    #[inline(always)]
    pub fn protocol_fee_reserve(
        &mut self,
        protocol_fee_reserve: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_fee_reserve = Some(protocol_fee_reserve);
        self
    }
    #[inline(always)]
    pub fn creator_fee_pool(
        &mut self,
        creator_fee_pool: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.creator_fee_pool = Some(creator_fee_pool);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn swap_authority(
        &mut self,
        swap_authority: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.swap_authority = swap_authority;
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to '2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5']`
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    /// `[optional account, default to 'JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2']`
    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn zero_for_one(&mut self, zero_for_one: bool) -> &mut Self {
        self.zero_for_one = Some(zero_for_one);
        self
    }
    #[inline(always)]
    pub fn delta_amount(&mut self, delta_amount: i64) -> &mut Self {
        self.delta_amount = Some(delta_amount);
        self
    }
    #[inline(always)]
    pub fn sqrt_price_limit_x96(&mut self, sqrt_price_limit_x96: u128) -> &mut Self {
        self.sqrt_price_limit_x96 = Some(sqrt_price_limit_x96);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SwapWithPriceLimit {
            config: self.config.expect("config is not set"),
            market: self.market.expect("market is not set"),
            market_reserve0: self.market_reserve0.expect("market_reserve0 is not set"),
            user_token_account0: self
                .user_token_account0
                .expect("user_token_account0 is not set"),
            market_reserve1: self.market_reserve1.expect("market_reserve1 is not set"),
            user_token_account1: self
                .user_token_account1
                .expect("user_token_account1 is not set"),
            fee_reserve: self.fee_reserve.expect("fee_reserve is not set"),
            protocol_fee_reserve: self
                .protocol_fee_reserve
                .expect("protocol_fee_reserve is not set"),
            creator_fee_pool: self.creator_fee_pool.expect("creator_fee_pool is not set"),
            user: self.user.expect("user is not set"),
            swap_authority: self.swap_authority,
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            event_authority: self.event_authority.unwrap_or(solana_program::pubkey!(
                "2JtBWhLnkYbE8tn2DT8QXVweeQjnNYr43GbyiKhANdt5"
            )),
            program: self.program.unwrap_or(solana_program::pubkey!(
                "JoeGXemoPqPeGPEXA3Z3UbjoPoGqqfbg8PD58M7Rqj2"
            )),
        };
        let args = SwapWithPriceLimitInstructionArgs {
            zero_for_one: self.zero_for_one.clone().expect("zero_for_one is not set"),
            delta_amount: self.delta_amount.clone().expect("delta_amount is not set"),
            sqrt_price_limit_x96: self
                .sqrt_price_limit_x96
                .clone()
                .expect("sqrt_price_limit_x96 is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `swap_with_price_limit` CPI accounts.
pub struct SwapWithPriceLimitCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve0: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account0: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve1: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account1: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator_fee_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `swap_with_price_limit` CPI instruction.
pub struct SwapWithPriceLimitCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve0: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account0: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_reserve1: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account1: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator_fee_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SwapWithPriceLimitInstructionArgs,
}

impl<'a, 'b> SwapWithPriceLimitCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SwapWithPriceLimitCpiAccounts<'a, 'b>,
        args: SwapWithPriceLimitInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            market: accounts.market,
            market_reserve0: accounts.market_reserve0,
            user_token_account0: accounts.user_token_account0,
            market_reserve1: accounts.market_reserve1,
            user_token_account1: accounts.user_token_account1,
            fee_reserve: accounts.fee_reserve,
            protocol_fee_reserve: accounts.protocol_fee_reserve,
            creator_fee_pool: accounts.creator_fee_pool,
            user: accounts.user,
            swap_authority: accounts.swap_authority,
            token_program: accounts.token_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_reserve0.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_account0.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_reserve1.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_account1.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_fee_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator_fee_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user.key,
            true,
        ));
        if let Some(swap_authority) = self.swap_authority {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *swap_authority.key,
                true,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::TOKEN_MILL_V2_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SwapWithPriceLimitInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::TOKEN_MILL_V2_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.market_reserve0.clone());
        account_infos.push(self.user_token_account0.clone());
        account_infos.push(self.market_reserve1.clone());
        account_infos.push(self.user_token_account1.clone());
        account_infos.push(self.fee_reserve.clone());
        account_infos.push(self.protocol_fee_reserve.clone());
        account_infos.push(self.creator_fee_pool.clone());
        account_infos.push(self.user.clone());
        if let Some(swap_authority) = self.swap_authority {
            account_infos.push(swap_authority.clone());
        }
        account_infos.push(self.token_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SwapWithPriceLimit` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` market
///   2. `[writable]` market_reserve0
///   3. `[writable]` user_token_account0
///   4. `[writable]` market_reserve1
///   5. `[writable]` user_token_account1
///   6. `[writable]` fee_reserve
///   7. `[writable]` protocol_fee_reserve
///   8. `[writable]` creator_fee_pool
///   9. `[signer]` user
///   10. `[signer, optional]` swap_authority
///   11. `[]` token_program
///   12. `[]` event_authority
///   13. `[]` program
#[derive(Clone, Debug)]
pub struct SwapWithPriceLimitCpiBuilder<'a, 'b> {
    instruction: Box<SwapWithPriceLimitCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapWithPriceLimitCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SwapWithPriceLimitCpiBuilderInstruction {
            __program: program,
            config: None,
            market: None,
            market_reserve0: None,
            user_token_account0: None,
            market_reserve1: None,
            user_token_account1: None,
            fee_reserve: None,
            protocol_fee_reserve: None,
            creator_fee_pool: None,
            user: None,
            swap_authority: None,
            token_program: None,
            event_authority: None,
            program: None,
            zero_for_one: None,
            delta_amount: None,
            sqrt_price_limit_x96: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    #[inline(always)]
    pub fn market_reserve0(
        &mut self,
        market_reserve0: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_reserve0 = Some(market_reserve0);
        self
    }
    #[inline(always)]
    pub fn user_token_account0(
        &mut self,
        user_token_account0: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_account0 = Some(user_token_account0);
        self
    }
    #[inline(always)]
    pub fn market_reserve1(
        &mut self,
        market_reserve1: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_reserve1 = Some(market_reserve1);
        self
    }
    #[inline(always)]
    pub fn user_token_account1(
        &mut self,
        user_token_account1: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_account1 = Some(user_token_account1);
        self
    }
    #[inline(always)]
    pub fn fee_reserve(
        &mut self,
        fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_reserve = Some(fee_reserve);
        self
    }
    #[inline(always)]
    pub fn protocol_fee_reserve(
        &mut self,
        protocol_fee_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_fee_reserve = Some(protocol_fee_reserve);
        self
    }
    #[inline(always)]
    pub fn creator_fee_pool(
        &mut self,
        creator_fee_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator_fee_pool = Some(creator_fee_pool);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn swap_authority(
        &mut self,
        swap_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.swap_authority = swap_authority;
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }
    #[inline(always)]
    pub fn zero_for_one(&mut self, zero_for_one: bool) -> &mut Self {
        self.instruction.zero_for_one = Some(zero_for_one);
        self
    }
    #[inline(always)]
    pub fn delta_amount(&mut self, delta_amount: i64) -> &mut Self {
        self.instruction.delta_amount = Some(delta_amount);
        self
    }
    #[inline(always)]
    pub fn sqrt_price_limit_x96(&mut self, sqrt_price_limit_x96: u128) -> &mut Self {
        self.instruction.sqrt_price_limit_x96 = Some(sqrt_price_limit_x96);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SwapWithPriceLimitInstructionArgs {
            zero_for_one: self
                .instruction
                .zero_for_one
                .clone()
                .expect("zero_for_one is not set"),
            delta_amount: self
                .instruction
                .delta_amount
                .clone()
                .expect("delta_amount is not set"),
            sqrt_price_limit_x96: self
                .instruction
                .sqrt_price_limit_x96
                .clone()
                .expect("sqrt_price_limit_x96 is not set"),
        };
        let instruction = SwapWithPriceLimitCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            market: self.instruction.market.expect("market is not set"),

            market_reserve0: self
                .instruction
                .market_reserve0
                .expect("market_reserve0 is not set"),

            user_token_account0: self
                .instruction
                .user_token_account0
                .expect("user_token_account0 is not set"),

            market_reserve1: self
                .instruction
                .market_reserve1
                .expect("market_reserve1 is not set"),

            user_token_account1: self
                .instruction
                .user_token_account1
                .expect("user_token_account1 is not set"),

            fee_reserve: self
                .instruction
                .fee_reserve
                .expect("fee_reserve is not set"),

            protocol_fee_reserve: self
                .instruction
                .protocol_fee_reserve
                .expect("protocol_fee_reserve is not set"),

            creator_fee_pool: self
                .instruction
                .creator_fee_pool
                .expect("creator_fee_pool is not set"),

            user: self.instruction.user.expect("user is not set"),

            swap_authority: self.instruction.swap_authority,

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SwapWithPriceLimitCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_reserve0: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_account0: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_reserve1: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_account1: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_fee_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    creator_fee_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    zero_for_one: Option<bool>,
    delta_amount: Option<i64>,
    sqrt_price_limit_x96: Option<u128>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
